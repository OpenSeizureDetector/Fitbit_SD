"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsonrpc_ts_1 = require("@fitbit/jsonrpc-ts");
var fdb_protocol_1 = require("@fitbit/fdb-protocol");
var BulkDataReceiver = (function () {
    function BulkDataReceiver(bulkData, name) {
        var _this = this;
        this.bulkData = bulkData;
        this.name = name;
        this.contexts = new Map();
        this.finalizeStream = function (_a) {
            var stream = _a.stream;
            var context = _this.popStreamContext(stream);
            context.resolve(context.stream.finalize());
        };
        this.abortStream = function (_a) {
            var stream = _a.stream;
            var context = _this.popStreamContext(stream);
            context.stream.finalize();
            context.reject('Aborted by host');
        };
    }
    BulkDataReceiver.prototype.receiveFromStream = function (executor) {
        var _this = this;
        var stream = this.bulkData.createWriteStream();
        return new Promise(function (resolve, reject) {
            new Promise(function (resolve) { return resolve(executor(stream)); })
                .then(function () {
                _this.contexts.set(stream.token, { stream: stream, resolve: resolve, reject: reject });
            })
                .catch(function (reason) {
                stream.finalize();
                reject(reason);
            });
        });
    };
    BulkDataReceiver.prototype.popStreamContext = function (token) {
        var context = this.contexts.get(token);
        if (context !== undefined) {
            this.contexts.delete(token);
            return context;
        }
        throw new jsonrpc_ts_1.InvalidParams("Stream token does not match any open " + this.name + " stream", { stream: token });
    };
    BulkDataReceiver.prototype.registerCloserMethods = function (dispatcher, finalizeMethod, abortMethod) {
        var finalize = abortMethod ? finalizeMethod : finalizeMethod + ".finalize";
        var abort = abortMethod || finalizeMethod + ".abort";
        dispatcher
            .method(finalize, fdb_protocol_1.FDBTypes.StreamCloseParams, this.finalizeStream)
            .method(abort, fdb_protocol_1.FDBTypes.StreamCloseParams, this.abortStream);
    };
    return BulkDataReceiver;
}());
exports.default = BulkDataReceiver;
//# sourceMappingURL=BulkDataReceiver.js.map