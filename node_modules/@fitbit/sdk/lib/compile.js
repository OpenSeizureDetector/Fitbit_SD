"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const gulp_terser_1 = tslib_1.__importDefault(require("gulp-terser"));
const pumpify_1 = tslib_1.__importDefault(require("pumpify"));
const rollup_plugin_babel_1 = tslib_1.__importDefault(require("rollup-plugin-babel"));
const rollup_plugin_commonjs_1 = tslib_1.__importDefault(require("rollup-plugin-commonjs"));
const rollup_plugin_json_1 = tslib_1.__importDefault(require("rollup-plugin-json"));
const rollup_plugin_node_resolve_1 = tslib_1.__importDefault(require("rollup-plugin-node-resolve"));
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const componentTargets_1 = tslib_1.__importStar(require("./componentTargets"));
const diagnostics_1 = require("./diagnostics");
const externals_1 = tslib_1.__importDefault(require("./externals"));
const rollupToVinyl_1 = tslib_1.__importDefault(require("./rollupToVinyl"));
const sdkVersion_1 = tslib_1.__importDefault(require("./sdkVersion"));
const brokenImports_1 = tslib_1.__importDefault(require("./plugins/brokenImports"));
const forbidAbsoluteImport_1 = tslib_1.__importDefault(require("./plugins/forbidAbsoluteImport"));
const i18nPolyfill_1 = tslib_1.__importDefault(require("./plugins/i18nPolyfill"));
const polyfill_1 = tslib_1.__importDefault(require("./plugins/polyfill"));
const polyfillDevice_1 = tslib_1.__importDefault(require("./plugins/polyfillDevice"));
const resourceImports_1 = tslib_1.__importDefault(require("./plugins/resourceImports"));
const typescript_2 = tslib_1.__importDefault(require("./plugins/typescript"));
const rollupWarningHandler_1 = tslib_1.__importDefault(require("./rollupWarningHandler"));
const tsconfigOverrides = {
    noEmitHelpers: false,
    importHelpers: true,
    noResolve: false,
    noEmit: false,
    inlineSourceMap: false,
    moduleResolution: typescript_1.default.ModuleResolutionKind.NodeJs,
    module: typescript_1.default.ModuleKind.ES2015,
    suppressOutputPathCheck: true,
};
function pluginIf(condition, plugin) {
    return condition ? [plugin()] : [];
}
function compile({ component, input, output, defaultLanguage, allowUnknownExternals = false, onDiagnostic = diagnostics_1.logDiagnosticToConsole, }) {
    const ecma = sdkVersion_1.default().major >= 3 && component !== componentTargets_1.ComponentType.DEVICE ? 6 : 5;
    const { translationsGlob } = componentTargets_1.default[component];
    return new pumpify_1.default.obj([
        rollupToVinyl_1.default(output, {
            input,
            external: externals_1.default[component],
            plugins: [
                typescript_2.default({
                    onDiagnostic,
                    tsconfigOverride: Object.assign({}, tsconfigOverrides, { target: ecma === 6 ? typescript_1.default.ScriptTarget.ES2015 : typescript_1.default.ScriptTarget.ES5 }),
                }),
                ...pluginIf(component === componentTargets_1.ComponentType.DEVICE, polyfillDevice_1.default),
                ...pluginIf(component !== componentTargets_1.ComponentType.DEVICE, () => polyfill_1.default(i18nPolyfill_1.default(translationsGlob, defaultLanguage))),
                ...pluginIf(sdkVersion_1.default().major < 3 || component === componentTargets_1.ComponentType.SETTINGS, resourceImports_1.default),
                ...pluginIf(sdkVersion_1.default().major < 2, rollup_plugin_json_1.default),
                forbidAbsoluteImport_1.default(),
                ...pluginIf(sdkVersion_1.default().major < 2, brokenImports_1.default),
                rollup_plugin_node_resolve_1.default({ preferBuiltins: false }),
                rollup_plugin_commonjs_1.default({ include: ['node_modules/**'] }),
                ...pluginIf(ecma === 5, () => rollup_plugin_babel_1.default({
                    plugins: [
                        require('@babel/plugin-transform-block-scoped-functions'),
                        require('@babel/plugin-transform-block-scoping'),
                    ],
                    compact: false,
                    babelrc: false,
                    extensions: ['.js', '.json'],
                    inputSourceMap: false,
                })),
            ],
            onwarn: rollupWarningHandler_1.default({
                onDiagnostic,
                codeCategories: allowUnknownExternals
                    ? { UNRESOLVED_IMPORT: diagnostics_1.DiagnosticCategory.Warning }
                    : undefined,
            }),
        }, {
            format: 'cjs',
            sourcemap: true,
        }),
        gulp_terser_1.default({
            ecma,
            mangle: {
                toplevel: true,
            },
            output: {
                semicolons: false,
            },
            compress: false,
        }),
    ]);
}
exports.default = compile;
