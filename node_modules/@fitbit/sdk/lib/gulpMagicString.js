"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const stream_1 = require("stream");
const magic_string_1 = tslib_1.__importDefault(require("magic-string"));
const plugin_error_1 = tslib_1.__importDefault(require("plugin-error"));
const source_map_1 = require("source-map");
const PLUGIN_NAME = 'gulp-magic-string';
async function mergeSourceMaps(inMap, outMap) {
    return source_map_1.SourceMapConsumer.with(inMap, null, async (inConsumer) => source_map_1.SourceMapConsumer.with(outMap, null, async (outConsumer) => {
        const generator = source_map_1.SourceMapGenerator.fromSourceMap(inConsumer);
        generator.applySourceMap(outConsumer);
        return generator.toJSON();
    }));
}
function gulpMagicString(transformerFunc) {
    return new stream_1.Transform({
        objectMode: true,
        transform(file, _, next) {
            if (file.isNull() || file.extname !== '.js') {
                return next(undefined, file);
            }
            if (!file.isBuffer()) {
                next(new plugin_error_1.default(PLUGIN_NAME, file.isStream()
                    ? 'Streaming mode is not supported.'
                    : 'Internal error processing file.', { fileName: file.relative }));
                return;
            }
            try {
                const code = file.contents.toString('utf-8');
                const parsed = new magic_string_1.default(code);
                transformerFunc(code, parsed);
                file.contents = Buffer.from(parsed.toString());
                if (!file.sourceMap)
                    return next(undefined, file);
                const map = parsed.generateMap();
                mergeSourceMaps(file.sourceMap, Object.assign({}, map, { version: Number(map.version), file: file.relative, sources: [file.relative] })).then((sourceMap) => {
                    file.sourceMap = sourceMap;
                    next(undefined, file);
                });
            }
            catch (error) {
                next(new plugin_error_1.default(PLUGIN_NAME, error, { fileName: file.relative }));
            }
        },
    });
}
exports.default = gulpMagicString;
