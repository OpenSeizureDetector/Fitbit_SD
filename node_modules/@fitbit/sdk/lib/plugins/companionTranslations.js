"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const util_1 = require("util");
const glob_1 = tslib_1.__importDefault(require("glob"));
const pofile_1 = tslib_1.__importDefault(require("pofile"));
const rollup_pluginutils_1 = require("rollup-pluginutils");
const languageTag_1 = require("../languageTag");
const glob = util_1.promisify(glob_1.default);
const loadPOFile = util_1.promisify(pofile_1.default.load);
async function loadTranslations(filePath) {
    const po = await loadPOFile(filePath);
    const messages = {};
    for (const { msgid, msgstr } of po.items) {
        if (msgstr.length > 1) {
            throw new Error(`msgid "${msgid}" in file "${filePath}" has multiple msgstr values. This is not supported.`);
        }
        messages[msgid] = msgstr[0];
    }
    return messages;
}
function companionTranslations(globPattern, defaultLanguage) {
    return async () => {
        const languagePaths = new Map();
        const translations = {};
        for (const filePath of await glob(globPattern)) {
            const tag = languageTag_1.normalizeLanguageTag(path_1.basename(filePath, '.po'));
            if (tag === null) {
                throw new Error(`Translation file "${filePath}" has a bad name. Translation files must have names in the form ll-cc.po or ll.po (e.g. en-US.po)`);
            }
            const existingTranslations = languagePaths.get(tag);
            if (existingTranslations) {
                throw new Error(`More than one translation file found for language ${tag}. Found "${existingTranslations}" and "${filePath}".`);
            }
            languagePaths.set(tag, filePath);
            translations[tag] = await loadTranslations(filePath);
        }
        if (!translations.hasOwnProperty(defaultLanguage)) {
            throw new Error(`No translation file found for default language "${defaultLanguage}"`);
        }
        return rollup_pluginutils_1.dataToEsm(translations, { namedExports: false });
    };
}
exports.default = companionTranslations;
