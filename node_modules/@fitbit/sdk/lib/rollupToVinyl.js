"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const stream_1 = require("stream");
const plugin_error_1 = tslib_1.__importDefault(require("plugin-error"));
const rollup = tslib_1.__importStar(require("rollup"));
const source_map_compactor_1 = tslib_1.__importDefault(require("source-map-compactor"));
const vinyl_1 = tslib_1.__importDefault(require("vinyl"));
function rollupToVinyl(outputPath, inputOptions, outputOptions) {
    const stream = new stream_1.Readable({ objectMode: true });
    stream._read = () => { };
    rollup
        .rollup(inputOptions)
        .then((bundle) => {
        stream.emit('bundle', bundle);
        return bundle.generate(outputOptions).then(({ code, map }) => {
            if (map) {
                map.mappings = JSON.parse(source_map_compactor_1.default(map)).mappings;
                map.file = outputPath;
            }
            stream.push(new vinyl_1.default({
                contents: Buffer.from(code, 'utf8'),
                path: path_1.resolve(process.cwd(), outputPath),
                sourceMap: map,
            }));
            stream.push(null);
        });
    })
        .catch((reason) => {
        setImmediate(() => {
            const pluginErr = new plugin_error_1.default('rollup', reason);
            if (reason.loc) {
                pluginErr.fileName = reason.loc.file;
                pluginErr.lineNumber = reason.loc.line;
                pluginErr.columnNumber = reason.loc.column;
            }
            delete pluginErr.loc;
            delete pluginErr.pos;
            stream.emit('error', pluginErr);
        });
    });
    return stream;
}
exports.default = rollupToVinyl;
