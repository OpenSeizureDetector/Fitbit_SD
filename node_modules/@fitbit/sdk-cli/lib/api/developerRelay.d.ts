/// <reference types="node" />
import * as t from 'io-ts';
import stream from 'stream';
export declare const Host: t.InterfaceType<{
    id: t.StringType;
    displayName: t.StringType;
    roles: t.ArrayType<t.StringType, string[], string[], unknown>;
    state: t.UnionType<(t.LiteralType<"available"> | t.LiteralType<"busy">)[], "available" | "busy", "available" | "busy", unknown>;
}, t.TypeOfProps<{
    id: t.StringType;
    displayName: t.StringType;
    roles: t.ArrayType<t.StringType, string[], string[], unknown>;
    state: t.UnionType<(t.LiteralType<"available"> | t.LiteralType<"busy">)[], "available" | "busy", "available" | "busy", unknown>;
}>, t.OutputOfProps<{
    id: t.StringType;
    displayName: t.StringType;
    roles: t.ArrayType<t.StringType, string[], string[], unknown>;
    state: t.UnionType<(t.LiteralType<"available"> | t.LiteralType<"busy">)[], "available" | "busy", "available" | "busy", unknown>;
}>, unknown>;
export declare type Host = t.TypeOf<typeof Host>;
export declare function connect(hostID: string): Promise<stream.Duplex>;
export declare function hosts(): Promise<{
    appHost: t.TypeOfProps<{
        id: t.StringType;
        displayName: t.StringType;
        roles: t.ArrayType<t.StringType, string[], string[], unknown>;
        state: t.UnionType<(t.LiteralType<"available"> | t.LiteralType<"busy">)[], "available" | "busy", "available" | "busy", unknown>;
    }>[];
    companionHost: t.TypeOfProps<{
        id: t.StringType;
        displayName: t.StringType;
        roles: t.ArrayType<t.StringType, string[], string[], unknown>;
        state: t.UnionType<(t.LiteralType<"available"> | t.LiteralType<"busy">)[], "available" | "busy", "available" | "busy", unknown>;
    }>[];
}>;
//# sourceMappingURL=developerRelay.d.ts.map