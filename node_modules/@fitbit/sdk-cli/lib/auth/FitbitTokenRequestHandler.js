"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const errors_1 = require("@openid/appauth/built/errors");
const token_response_1 = require("@openid/appauth/built/token_response");
const query_string_utils_1 = require("@openid/appauth/built/query_string_utils");
const node_requestor_1 = require("@openid/appauth/built/node_support/node_requestor");
const t = tslib_1.__importStar(require("io-ts"));
const environment_1 = tslib_1.__importDefault(require("./environment"));
const fetch_1 = tslib_1.__importDefault(require("../fetch"));
const { clientId, clientSecret } = environment_1.default().config;
const FitbitAuthErrorResponse = t.interface({
    errors: t.array(t.interface({
        errorType: t.string,
        message: t.string,
    })),
    success: t.boolean,
});
const FitbitTokenResponse = t.interface({
    access_token: t.string,
    refresh_token: t.string,
    expires_in: t.number,
});
const commonParams = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        Authorization: 'Basic ' + Buffer.from(`${clientId}:${clientSecret}`).toString('base64'),
    },
};
class FitbitTokenRequestHandler {
    constructor() {
        this.requestor = new node_requestor_1.NodeRequestor();
        this.utils = new query_string_utils_1.BasicQueryStringUtils();
    }
    performRevokeTokenRequest(configuration, request) {
        return fetch_1.default(configuration.revocationEndpoint, Object.assign({}, commonParams, { body: this.utils.stringify({
                token: request.token,
            }) })).then(response => response.ok);
    }
    async performTokenRequest(configuration, request) {
        const response = await fetch_1.default(configuration.tokenEndpoint, Object.assign({}, commonParams, { body: this.utils.stringify(request.toStringMap()) }));
        const responseJson = await response.json();
        if (response.status === 200 && FitbitTokenResponse.is(responseJson)) {
            return token_response_1.TokenResponse.fromJson(responseJson);
        }
        if (FitbitAuthErrorResponse.is(responseJson)) {
            const error = responseJson.errors[0];
            throw new errors_1.AppAuthError(error.errorType, new token_response_1.TokenError(error.errorType, error.message));
        }
        throw new errors_1.AppAuthError(`Unexpected response format for status ${response.status}: ${JSON.stringify(responseJson)}`);
    }
}
exports.default = FitbitTokenRequestHandler;
//# sourceMappingURL=FitbitTokenRequestHandler.js.map