"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var pofile_1 = tslib_1.__importDefault(require("pofile"));
var text_encoding_utf_8_1 = require("text-encoding-utf-8");
var fbpubfletcher32_1 = tslib_1.__importDefault(require("./fbpubfletcher32"));
var HASH_MASK = 0x3fffffff;
function hashUTF8(string) {
    return fbpubfletcher32_1.default(new text_encoding_utf_8_1.TextEncoder('utf-8').encode(string).buffer) & HASH_MASK;
}
var _Message = (function () {
    function _Message(msgid) {
        this.msgid = msgid;
        this.msgstr = {};
        this.maxLength = 0;
    }
    _Message.prototype.addTranslation = function (language, string) {
        var utf8String = new text_encoding_utf_8_1.TextEncoder('utf-8').encode(string);
        this.msgstr[language] = utf8String;
        this.maxLength = Math.max(this.maxLength, utf8String.length);
    };
    return _Message;
}());
exports._Message = _Message;
var TranslationLoader = (function () {
    function TranslationLoader() {
        this.languages = new Set();
        this.messages = new Map();
    }
    TranslationLoader.prototype.loadLanguage = function (language, podata) {
        if (this.languages.has(language)) {
            throw new Error("Language '" + language + "' already loaded");
        }
        var po = pofile_1.default.parse(podata);
        try {
            for (var _a = tslib_1.__values(po.items), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = _b.value, msgid = _c.msgid, msgstr = _c.msgstr;
                if (msgstr.length > 1) {
                    throw new Error("msgid \"" + msgid + "\" has multiple msgstr values. This is not supported.");
                }
                var hashKey = hashUTF8(msgid);
                var message = this.messages.get(hashKey);
                if (message === undefined) {
                    message = new _Message(msgid);
                    this.messages.set(hashKey, message);
                }
                if (message.msgid !== msgid) {
                    throw new Error("msgid \"" + msgid + "\" hashes to the same value as \"" + message.msgid + "\" -- tweak msgid and try again");
                }
                message.addTranslation(language, msgstr[0]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.languages.add(language);
        return this;
        var e_1, _d;
    };
    TranslationLoader.prototype.build = function () {
        return new LanguageTable(this.languages, this.messages);
    };
    return TranslationLoader;
}());
exports.TranslationLoader = TranslationLoader;
var LanguageTable = (function () {
    function LanguageTable(languages, messages) {
        this.languages = languages;
        this.messages = messages;
    }
    LanguageTable.prototype.getLanguage = function (language) {
        var ids = [];
        var stringTableLength = 0;
        try {
            for (var _a = tslib_1.__values(this.messages.entries()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), id = _c[0], message = _c[1];
                var msgstr = message.msgstr[language];
                if (msgstr !== undefined) {
                    ids.push(id);
                    stringTableLength += msgstr.byteLength + 1;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (ids.length === 0)
            throw new Error("There are no translation strings for \"" + language + "\"");
        ids.sort(function (a, b) { return a - b; });
        var headerLength = 4
            + 8 * ids.length
            + 2;
        var outArray = new Uint8Array(headerLength + stringTableLength);
        var dataView = new DataView(outArray.buffer);
        var headerCursor = 0;
        var stringOffset = 0;
        dataView.setUint16(headerCursor, ids.length, true);
        headerCursor += 4;
        try {
            for (var ids_1 = tslib_1.__values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                var id = ids_1_1.value;
                var message = this.messages.get(id);
                dataView.setUint32(headerCursor, id, true);
                headerCursor += 4;
                dataView.setUint16(headerCursor, stringOffset, true);
                headerCursor += 2;
                dataView.setUint16(headerCursor, message.maxLength, true);
                headerCursor += 2;
                var msgstr = message.msgstr[language];
                outArray.set(msgstr, headerLength + stringOffset);
                stringOffset += msgstr.byteLength + 1;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (ids_1_1 && !ids_1_1.done && (_e = ids_1.return)) _e.call(ids_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        dataView.setUint16(headerCursor, stringOffset, true);
        return outArray.buffer;
        var e_2, _d, e_3, _e;
    };
    return LanguageTable;
}());
exports.LanguageTable = LanguageTable;
