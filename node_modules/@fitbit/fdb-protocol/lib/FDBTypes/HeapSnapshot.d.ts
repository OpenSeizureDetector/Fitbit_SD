import * as t from 'io-ts';
export declare const HeapSnapshotCapability: t.IntersectionType<[t.IntersectionType<[t.InterfaceType<{
    supported: t.BooleanType;
}, t.TypeOfProps<{
    supported: t.BooleanType;
}>, t.OutputOfProps<{
    supported: t.BooleanType;
}>, unknown>, t.PartialType<{
    requiresInstrumentedLaunch: t.BooleanType;
}, t.TypeOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}>, t.OutputOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}>, unknown>], t.TypeOfProps<{
    supported: t.BooleanType;
}> & t.TypeOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}>, t.OutputOfProps<{
    supported: t.BooleanType;
}> & t.OutputOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}>, unknown>, t.PartialType<{
    formats: t.ArrayType<t.StringType, string[], string[], unknown>;
}, t.TypeOfPartialProps<{
    formats: t.ArrayType<t.StringType, string[], string[], unknown>;
}>, t.OutputOfPartialProps<{
    formats: t.ArrayType<t.StringType, string[], string[], unknown>;
}>, unknown>], t.TypeOfProps<{
    supported: t.BooleanType;
}> & t.TypeOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}> & t.TypeOfPartialProps<{
    formats: t.ArrayType<t.StringType, string[], string[], unknown>;
}>, t.OutputOfProps<{
    supported: t.BooleanType;
}> & t.OutputOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}> & t.OutputOfPartialProps<{
    formats: t.ArrayType<t.StringType, string[], string[], unknown>;
}>, unknown>;
export declare type HeapSnapshotCapability = t.TypeOf<typeof HeapSnapshotCapability>;
export declare const AppHeapSnapshotRequest: t.InterfaceType<{
    format: t.StringType;
    stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, unknown>)[], string | number, string | number, unknown>;
}, t.TypeOfProps<{
    format: t.StringType;
    stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, unknown>)[], string | number, string | number, unknown>;
}>, t.OutputOfProps<{
    format: t.StringType;
    stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, unknown>)[], string | number, string | number, unknown>;
}>, unknown>;
export declare type AppHeapSnapshotRequest = t.TypeOf<typeof AppHeapSnapshotRequest>;
//# sourceMappingURL=HeapSnapshot.d.ts.map