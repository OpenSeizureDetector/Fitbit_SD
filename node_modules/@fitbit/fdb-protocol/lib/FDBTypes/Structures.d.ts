import * as t from 'io-ts';
export declare enum ErrorCodes {
    HostNotInitialized = -32001,
    MessageTooLong = -32002,
    ResponseTooLong = -32003,
    RequestError = -1
}
export declare const NonNegativeInteger: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
export declare const PositiveInteger: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
export declare const ObjectURI: t.StringType;
export declare type ObjectURI = t.TypeOf<typeof ObjectURI>;
export declare const AppFileURI: t.RefinementType<t.StringType, string, string, unknown>;
export declare type AppFileURI = t.TypeOf<typeof AppFileURI>;
export declare const Timestamp: t.NumberType;
export declare type Timestamp = t.TypeOf<typeof Timestamp>;
export declare const Semver: t.Type<string, string, unknown>;
export declare type Semver = t.TypeOf<typeof Semver>;
export declare const ReleaseSemver: t.RefinementType<t.Type<string, string, unknown>, string, string, unknown>;
export declare type ReleaseSemver = t.TypeOf<typeof ReleaseSemver>;
export declare const Position: t.IntersectionType<[t.InterfaceType<{
    source: t.RefinementType<t.StringType, string, string, unknown>;
    line: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
    column: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
}, t.TypeOfProps<{
    source: t.RefinementType<t.StringType, string, string, unknown>;
    line: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
    column: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
}>, t.OutputOfProps<{
    source: t.RefinementType<t.StringType, string, string, unknown>;
    line: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
    column: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
}>, unknown>, t.PartialType<{
    generated: t.BooleanType;
    name: t.StringType;
}, t.TypeOfPartialProps<{
    generated: t.BooleanType;
    name: t.StringType;
}>, t.OutputOfPartialProps<{
    generated: t.BooleanType;
    name: t.StringType;
}>, unknown>], t.TypeOfProps<{
    source: t.RefinementType<t.StringType, string, string, unknown>;
    line: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
    column: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
}> & t.TypeOfPartialProps<{
    generated: t.BooleanType;
    name: t.StringType;
}>, t.OutputOfProps<{
    source: t.RefinementType<t.StringType, string, string, unknown>;
    line: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
    column: t.RefinementType<t.RefinementType<t.NumberType, number, number, unknown>, number, number, unknown>;
}> & t.OutputOfPartialProps<{
    generated: t.BooleanType;
    name: t.StringType;
}>, unknown>;
export declare type Position = t.TypeOf<typeof Position>;
export declare const UUID: t.RefinementType<t.StringType, string, string, unknown>;
export declare type UUID = t.TypeOf<typeof UUID>;
export declare const BuildID: t.RefinementType<t.StringType, string, string, unknown>;
export declare type BuildID = t.TypeOf<typeof BuildID>;
export declare const App: t.InterfaceType<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}, t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}>, t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}>, unknown>;
export declare type App = t.TypeOf<typeof App>;
export declare const Component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
export declare type Component = t.TypeOf<typeof Component>;
export declare const AppComponent: t.IntersectionType<[t.InterfaceType<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}, t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}>, t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}>, unknown>, t.InterfaceType<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}, t.TypeOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, t.OutputOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, unknown>], t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}> & t.TypeOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}> & t.OutputOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, unknown>;
export declare type AppComponent = t.TypeOf<typeof AppComponent>;
export declare const DeviceHost: t.PartialType<{
    hostID: t.StringType;
}, t.TypeOfPartialProps<{
    hostID: t.StringType;
}>, t.OutputOfPartialProps<{
    hostID: t.StringType;
}>, unknown>;
export declare type DeviceHost = t.TypeOf<typeof DeviceHost>;
export declare const InstalledApp: t.UnionType<(t.InterfaceType<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}, t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}>, t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}>, unknown> | t.PartialType<{
    hostID: t.StringType;
}, t.TypeOfPartialProps<{
    hostID: t.StringType;
}>, t.OutputOfPartialProps<{
    hostID: t.StringType;
}>, unknown>)[], t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}> | t.TypeOfPartialProps<{
    hostID: t.StringType;
}>, t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}> | t.OutputOfPartialProps<{
    hostID: t.StringType;
}>, unknown>;
export declare type InstalledApp = t.TypeOf<typeof InstalledApp>;
export declare const InstalledAppComponent: t.UnionType<(t.IntersectionType<[t.InterfaceType<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}, t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}>, t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}>, unknown>, t.InterfaceType<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}, t.TypeOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, t.OutputOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, unknown>], t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}> & t.TypeOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}> & t.OutputOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, unknown> | t.PartialType<{
    hostID: t.StringType;
}, t.TypeOfPartialProps<{
    hostID: t.StringType;
}>, t.OutputOfPartialProps<{
    hostID: t.StringType;
}>, unknown>)[], (t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}> & t.TypeOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>) | t.TypeOfPartialProps<{
    hostID: t.StringType;
}>, (t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    buildID: t.RefinementType<t.StringType, string, string, unknown>;
}> & t.OutputOfProps<{
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>) | t.OutputOfPartialProps<{
    hostID: t.StringType;
}>, unknown>;
export declare type InstalledAppComponent = t.TypeOf<typeof InstalledAppComponent>;
export declare const ComponentBundleKind: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion">)[], "app" | "companion", "app" | "companion", unknown>;
export declare type ComponentBundleKind = t.TypeOf<typeof ComponentBundleKind>;
//# sourceMappingURL=Structures.d.ts.map