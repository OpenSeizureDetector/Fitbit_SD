import * as t from 'io-ts';
export declare const LaunchCapabilities: t.PartialType<{
    appComponent: t.PartialType<{
        canLaunch: t.BooleanType;
    }, t.TypeOfPartialProps<{
        canLaunch: t.BooleanType;
    }>, t.OutputOfPartialProps<{
        canLaunch: t.BooleanType;
    }>, unknown>;
}, t.TypeOfPartialProps<{
    appComponent: t.PartialType<{
        canLaunch: t.BooleanType;
    }, t.TypeOfPartialProps<{
        canLaunch: t.BooleanType;
    }>, t.OutputOfPartialProps<{
        canLaunch: t.BooleanType;
    }>, unknown>;
}>, t.OutputOfPartialProps<{
    appComponent: t.PartialType<{
        canLaunch: t.BooleanType;
    }, t.TypeOfPartialProps<{
        canLaunch: t.BooleanType;
    }>, t.OutputOfPartialProps<{
        canLaunch: t.BooleanType;
    }>, unknown>;
}>, unknown>;
export declare type LaunchCapabilities = t.TypeOf<typeof LaunchCapabilities>;
export declare const LaunchComponentParams: t.IntersectionType<[t.InterfaceType<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}, t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}>, unknown>, t.PartialType<{
    debugInstrumentation: t.BooleanType;
}, t.TypeOfPartialProps<{
    debugInstrumentation: t.BooleanType;
}>, t.OutputOfPartialProps<{
    debugInstrumentation: t.BooleanType;
}>, unknown>], t.TypeOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}> & t.TypeOfPartialProps<{
    debugInstrumentation: t.BooleanType;
}>, t.OutputOfProps<{
    uuid: t.RefinementType<t.StringType, string, string, unknown>;
    component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", unknown>;
}> & t.OutputOfPartialProps<{
    debugInstrumentation: t.BooleanType;
}>, unknown>;
export declare type LaunchComponentParams = t.TypeOf<typeof LaunchComponentParams>;
//# sourceMappingURL=Launch.d.ts.map