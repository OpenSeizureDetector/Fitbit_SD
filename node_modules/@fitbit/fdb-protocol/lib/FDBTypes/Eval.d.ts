import * as t from 'io-ts';
export declare const EvalToStringCapability: t.IntersectionType<[t.InterfaceType<{
    supported: t.BooleanType;
}, t.TypeOfProps<{
    supported: t.BooleanType;
}>, t.OutputOfProps<{
    supported: t.BooleanType;
}>, unknown>, t.PartialType<{
    requiresInstrumentedLaunch: t.BooleanType;
}, t.TypeOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}>, t.OutputOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}>, unknown>], t.TypeOfProps<{
    supported: t.BooleanType;
}> & t.TypeOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}>, t.OutputOfProps<{
    supported: t.BooleanType;
}> & t.OutputOfPartialProps<{
    requiresInstrumentedLaunch: t.BooleanType;
}>, unknown>;
export declare type EvalToStringCapability = t.TypeOf<typeof EvalToStringCapability>;
export declare const AppDebugEvalParams: t.InterfaceType<{
    cmd: t.StringType;
}, t.TypeOfProps<{
    cmd: t.StringType;
}>, t.OutputOfProps<{
    cmd: t.StringType;
}>, unknown>;
export declare type AppDebugEvalParams = t.TypeOf<typeof AppDebugEvalParams>;
export declare const AppDebugEvalValueResult: t.InterfaceType<{
    success: t.LiteralType<true>;
    value: t.StringType;
}, t.TypeOfProps<{
    success: t.LiteralType<true>;
    value: t.StringType;
}>, t.OutputOfProps<{
    success: t.LiteralType<true>;
    value: t.StringType;
}>, unknown>;
export declare type AppDebugEvalValueResult = t.TypeOf<typeof AppDebugEvalValueResult>;
export declare const AppDebugEvalFailureResult: t.InterfaceType<{
    success: t.LiteralType<false>;
}, t.TypeOfProps<{
    success: t.LiteralType<false>;
}>, t.OutputOfProps<{
    success: t.LiteralType<false>;
}>, unknown>;
export declare type AppDebugEvalFailureResult = t.TypeOf<typeof AppDebugEvalFailureResult>;
export declare const AppDebugEvalResult: t.UnionType<(t.InterfaceType<{
    success: t.LiteralType<true>;
    value: t.StringType;
}, t.TypeOfProps<{
    success: t.LiteralType<true>;
    value: t.StringType;
}>, t.OutputOfProps<{
    success: t.LiteralType<true>;
    value: t.StringType;
}>, unknown> | t.InterfaceType<{
    success: t.LiteralType<false>;
}, t.TypeOfProps<{
    success: t.LiteralType<false>;
}>, t.OutputOfProps<{
    success: t.LiteralType<false>;
}>, unknown>)[], t.TypeOfProps<{
    success: t.LiteralType<true>;
    value: t.StringType;
}> | t.TypeOfProps<{
    success: t.LiteralType<false>;
}>, t.OutputOfProps<{
    success: t.LiteralType<true>;
    value: t.StringType;
}> | t.OutputOfProps<{
    success: t.LiteralType<false>;
}>, unknown>;
export declare type AppDebugEvalResult = t.TypeOf<typeof AppDebugEvalResult>;
//# sourceMappingURL=Eval.d.ts.map