/// <reference types="node" />
import * as stream from 'stream';
import ErrorSubclass from 'error-subclass';
import * as jrpc from './protocol';
export declare enum ErrorCodes {
    PARSE_ERROR = -32700,
    INVALID_REQUEST = -32600,
    METHOD_NOT_FOUND = -32601,
    INVALID_PARAMS = -32602,
    INTERNAL_ERROR = -32603
}
export declare class RPCError extends ErrorSubclass {
    static displayName: string;
    readonly code: number;
    readonly data: any;
    constructor(message: string, code?: number, data?: any);
    toErrorObject(): jrpc.ErrorObject;
}
export declare class MethodNotFound extends RPCError {
    static displayName: string;
    constructor(message: string, data?: any);
}
export declare class InvalidParams extends RPCError {
    static displayName: string;
    constructor(message: string, data?: any);
}
export declare class ParseError extends RPCError {
    static displayName: string;
    constructor(message: string, data?: any);
}
export declare class MethodCallTimeout extends ErrorSubclass {
    static displayName: string;
    readonly method: string;
    constructor(method: string);
}
export declare class NumericIdIterator implements Iterator<jrpc.RPCID> {
    state: number;
    constructor(initialValue?: number);
    next(): {
        value: number;
        done: boolean;
    };
}
export declare type RequestHandler = (this: void, method: string, params: jrpc.RPCParams) => Promise<any> | any;
export declare type NotificationHandler = (this: void, method: string, params: jrpc.RPCParams) => void;
export interface PeerOptions {
    idIterator?: Iterator<jrpc.RPCID>;
}
export declare class Peer extends stream.Duplex {
    onRequest?: RequestHandler;
    onNotification?: NotificationHandler;
    requestIdIterator: Iterator<jrpc.RPCID>;
    private pendingRequests;
    ended: boolean;
    constructor(handlers: {
        onRequest?: RequestHandler;
        onNotification?: NotificationHandler;
    }, options?: PeerOptions);
    private onend;
    private assertNotEnded;
    callMethod(method: string, params?: jrpc.RPCParams, { timeout }?: {
        timeout?: number | undefined;
    }): Promise<any>;
    sendNotification(method: string, params?: jrpc.RPCParams): void;
    pushError(error: jrpc.ErrorObject): void;
    _read(): void;
    _write(chunk: any, encoding: string, callback: (err?: Error) => void): void;
    handleRequest(request: jrpc.Request): void;
    handleNotification(notification: jrpc.Notification): void;
    handleResponse(response: jrpc.Response): void;
    handleError(message: jrpc.Error): void;
}
